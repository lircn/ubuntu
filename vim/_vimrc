" by Li zheng <6007381@qq.com>

let mapleader = "\<SPACE>"             " must on the top
let g:mapleader = "\<SPACE>"

set nocompatible                " be iMproved
filetype off                    " required!

" Fix ml_get error
let g:netrw_use_noswf= 0

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" support golang
Plugin 'fatih/vim-go'

" support vue
Plugin 'posva/vim-vue'
au BufRead,BufNewFile *.wpy setlocal filetype=vue.html.javascript.css

" Tags
Plugin 'majutsushi/tagbar'
map <silent> <F2> :TagbarToggle<CR>
let g:tagbar_left = 1
let g:tagbar_width = 30
let g:tagbar_iconchars = ['▸', '▾']
let g:tagbar_map_zoomwin = "z"
let g:tagbar_map_togglefold = "x"
let g:tagbar_map_jump = "o""
let g:tagbar_autofocus = 1
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" NERDTree
Plugin 'scrooloose/nerdtree.git'
map <silent> <F3> :NERDTreeToggle<CR>
map <silent> <Leader><F3> :NERDTreeFind<CR>
let NERDChristmasTree=1
let NERDTreeAutoCenter=1
let NERDTreeMouseMode=2
let NERDTreeShowBookmarks=1
let NERDTreeWinPos='right'
let NERDTreeWinSize=45
let NERDTreeShowLineNumbers=0
let NERDTreeIgnore=['cscope.in.out', 'cscope.out', 'cscope.files', 'cscope.po.out', 'tags', '\.swp$', '\.git$', '\.svn$']
let NERDTreeMapToggleZoom='z'
let NERDTreeMinimalUI=1


" L9
Plugin 'vim-scripts/L9'


" ctrlp
Plugin 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map= '<C-p>'
let g:ctrlp_cmd = 'CtrlPMRU'
let g:ctrlp_lazy_update = 1
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_regexp = 1
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:40'
let g:ctrlp_max_files = 0
let g:ctrlp_working_path_mode = 'a'
let g:ctrlp_custom_ignore = {
\ 'dir':  '\v[\/]\.(git|hg|svn)$',
\ 'file': '\v\.(exe|so|dll)$',
\ }


" Grep
Plugin 'rking/ag.vim'
let g:ag_prg="ag --vimgrep --smart-case"
let g:ackprg = 'ag --vimgrep'
map <leader><F6> :Ag <C-R>=expand("<cword>")<CR><CR>


" Syntax checker
Plugin 'scrooloose/syntastic.git'
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_python_checkers=['pyflakes']
let g:syntastic_cpp_include_dirs = ['/usr/include/']
map <silent> <leader>sc :SyntasticCheck<CR>
map <silent> <leader>sr :SyntasticReset<CR>


" Snippet
Plugin 'SirVer/ultisnips'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'honza/vim-snippets'
"inoremap <tab> <c-r>=UltiSnips#ExpandSnippet()<cr>
let g:snips_author = 'Li Zheng <lizheng_w5625@tp-link.net>'
let g:UltiSnipsSnippetDirectories=["~/.vim/bundle/vim-snippets/UltiSnips", "lirsnippets"]
au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction


" YouCompleteMe YCM
Plugin 'Valloric/YouCompleteMe'
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
"let g:ycm_show_diagnostics_ui = 0
let g:ycm_auto_trigger = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_key_list_select_completion   = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>

" Git
Plugin 'tpope/vim-fugitive.git'

" Misc
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/DrawIt'
Plugin 'uguu-org/vim-matrix-screensaver'

" Markdown
Plugin 'plasticboy/vim-markdown'

" python
""Plugin 'vim-scripts/Pydiction'
""Plugin 'vim-scripts/python.vim'
""let g:pydiction_location='~/.vim/bundle/Pydiction/complete-dict'

" Lua
""Plugin 'xolox/vim-misc'
""Plugin 'xolox/vim-lua-inspect'
" Plugin 'xolox/vim-lua-ftplugin'
""let g:lua_inspect_warnings = 0
""let g:loaded_luainspect = 1
" autocmd FileType lua setlocal completefunc=xolox#lua

filetype plugin indent on     " required!


" Cscope
if has("cscope")
    set csto=0
    set cst
    set nocsverb
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
    "set cscopequickfix=s-,g-,c-,t-,e-,f-,i-,d-
endif
"s: Find this C symbol
"g: Find this definition
"c: Find functions calling this function
"t: Find this text string
"d: Find functions called by this function
"   *gd* will be more helpful without cscope database
"e: Find this egrep pattern
"f: Find this file
"   *gf* will be more helpful without cscope database
"i: Find files #including this file
nmap <F5>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <F5>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <F5>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <F5>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <F5>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <F5>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <F5>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <F5>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>



" General

" 自动换行
set wrap
" 允许退格键
set backspace=indent,eol,start whichwrap+=<,>,[,]
" 自动缩进
set ai!
" 设置匹配模式
set showmatch

" For myself
set scrolloff=4
" set cmdheight=2

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
autocmd! bufwritepost .vimrc source ~/.vimrc
autocmd BufEnter * let &titlestring = ' ' . expand("%:t")
set title
set textwidth=0
set nu

" 将tab显示为>-,尾行空格显示为-
set listchars=tab:>-,trail:-
set list

" Tabs
set softtabstop=4

"set expandtab      " Use space to replace tab, can usb <C-V><Tab> to insert a real tab
set noexpandtab   " replace tab to space. use <C-V><Tab> to insert a real tab.
set tabstop=4       " show tab indent word space.
set shiftwidth=4    " tab length

" encoding
set encoding=utf-8
set termencoding=utf-8
set fileencodings=ucs-bom,utf-8,chinese,gb2312

set fileformats=unix,dos
set autoindent
set noshowmode
set showcmd
set foldlevel=50
set autoread
set wildmenu
set wildignore=*.o,*~,*.pyc
if has('mouse')
    set mouse=a
endif
" 编辑过程中，在右下角显示光标位置的状态行
set ruler

" Search
set incsearch
set hlsearch
set ignorecase
set smartcase

" Powerline, airline
set rtp+=~/git/powerline/powerline/bindings/vim
set laststatus=2
set showtabline=2
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline
""" Top 2:
""" badwolf
""" dark
""let g:airline_theme = "badwolf"


" persistent undo
set undofile
set undodir=~/.vim/undodir

" Map leader
map <leader>ss :source ~/.vimrc<CR>:noh<CR>
map <leader>ee :e ~/.vimrc<CR>
map <leader><CR> :noh<CR>
map <leader>a A
map <leader>q :qa!<CR>

" vim-expand-region
Plugin 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Copy to CLIPBOARD, and use 'y' to copy to the PRIMARY
" vim-gnome
map <leader>y "+y
map <leader>p "+p

" Switch CWD
map <leader>cd :cd %:p:h<CR>:call GetCwd()<CR>

" Reload cscope and lookup database
map <leader>rl :cs add cscope.out<CR>:let g:LookupFile_TagExpr = '"./filenametags"'<CR>

" When you press <leader>r you can search and replace the selected text
" append /g to the end to replace all
vmap <leader>r :call VisualSelection('replace')<CR>

" When you press gv you vimgrep after the selected text
vmap <leader>gv :call VisualSelection('gv')<CR>

" output to json format
vmap <leader>jp :!jp<CR>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Normal map
nmap ` .

" Move between windows
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
nmap <C-h> <C-w>h

" replaced by <C-c>
nmap - ^
nmap = $

" use Q for recording
noremap q <Nop>
noremap Q q

" Highlighting all the same word under the cursor, like use SI.
map <F6> /\C\<<C-R>=expand("<cword>")<CR>\><CR>N

" Highlighting all the same string according to current selection
""vnoremap <silent><F6> :call VisualSelection('f')<CR>
vnoremap <F6> :call VisualSelection('f')<CR>

" Look up dictionary, cover IndexedSearch's map
nmap ? :call Dict()<CR>
vnoremap ? :call VisualSelection('?')<CR>


" Auto convert a word to a $(shell variable
imap <C-h> <ESC>bi${<ESC>exea}
imap <C-g> <ESC>bi$(<ESC>exea)

" jump to the match brace
map ]] ]}
map [[ [{

" Open a fully width quickfix window at the bottom of vim
map <F8> :botright cwindow<CR>

" 快捷删除行末空白，展开tab，移除
nmap <F9> :call Clean()<CR>

nmap <F12> :call Do_CsTag()<CR>


" 行选择,然后:Tabularize/=则把所选行的=全部对齐
Plugin 'godlygeek/tabular'
vmap <leader>= :Tabularize/

" format for js
Plugin 'maksimr/vim-jsbeautify'
map <leader>jsb :'<,'>!js-beautify -i<CR>
autocmd FileType javascript noremap <buffer>  <leader>jsb :call JsBeautify()<CR>
autocmd FileType html noremap <buffer> <leader>htmlb :call HtmlBeautify()<CR>
autocmd FileType css noremap <buffer> <leader>cssb :call CSSBeautify()<CR>

" Color
set t_Co=256
colorscheme darkburn_lir

" 81 notice
syntax enable

" 括号和引号补全
inoremap ( ()<Esc>i
inoremap [ []<Esc>i
inoremap { {}<Esc>i

" inoremap ) <c-r>=ClosePair(')')<CR>
" inoremap ] <C-r>=ClosePair(']')<CR>
" inoremap } <C-r>=CloseBracket()<CR>
inoremap " <C-r>=QuoteDelim('"')<CR>
inoremap ' <C-r>=QuoteDelim("'")<CR>

" highlight
set mps+=<:>



""""""""""""""VimGdb""""""""""""""""""
"Plugin "larrupingpig/vimgdb-for-vim7.3"

":set previewheight=12
":run macros/gdb_mappings.vim
":set asm=0
":set gdbprg=/usr/bin/gdb
":map <F7> :bel 30vsplit gdb-variables<cr>
":map <F8> :close<Esc>
"map <c-w><c-f> :FirstExplorerWindow<cr>
"map <c-w><c-b> :BottomExplorerWindow<cr>
"map <c-w><c-t> :WMToggle<cr>
"let g:winManagerWindowLayout='FileExplorer|TagList'
":map <F6> :WMToggle<cr>


"set dictionary+=/usr/share/stardict/dic/stardict-langdao-ec-gb-2.4.2
"

" required"
call vundle#end()

" Helper functions

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! Dict()
  let expl=system('sdcv -n ' .
        \  expand("<cword>"))
  windo if
        \ expand("%")=="diCt-tmp" |
        \ q!|endif
  rightbelow 30vsp diCt-tmp
  setlocal buftype=nofile bufhidden=hide noswapfile
  1s/^/\=expl/
  1
endfunction

function! VisualSelection(direction) range
	let l:saved_reg = @"
	execute "normal! vgvy"

	let l:pattern = escape(@", '\\/.*$^~[]')
	call CmdLine("!echo " . l:pattern)

	let l:pattern = substitute(l:pattern, "\n$", "", "")

	call CmdLine("!echo " . l:pattern)

	if a:direction == 'b'
		execute "normal ?" . l:pattern . "^M"
	elseif a:direction == 'gv'
		call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
	elseif a:direction == 'replace'
		call CmdLine("%s" . '/'. l:pattern . '/')
	elseif a:direction == 'f'
		call CmdLine("!echo " . l:pattern)
		execute "normal /" . l:pattern . "^M"
	elseif a:direction == '?'
		call CmdLine("!echo " . l:pattern)
		call CmdLine("!sdcv " . l:pattern)
	endif

	let @/ = l:pattern
	let @" = l:saved_reg
endfunction

function! GetCwd()
    let l:cwd = getcwd()
    call CmdLine("cd " . l:cwd)
endfunction

function! Do_CsTag()
    let dir = getcwd()
    if filereadable("tags")
        let tagsdeleted = delete("./"."tags")
        if(tagsdeleted != 0)
            echohl WarningMsg | echo "Fail to do tags! I cannot delete the tags" | echohl None
            return
        endif
    endif
    if has("cscope")
        silent! execute "cs kill -1"
    endif
    if filereadable("cscope.files")
        let csfilesdeleted=delete("./"."cscope.files")
        if(csfilesdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.files" | echohl None
            return
        endif
    endif
    if filereadable("cscope.out")
        let csoutdeleted=delete("./"."cscope.out")
        if(csoutdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.out" | echohl None
            return
        endif
    endif
    if(executable('ctags'))
        silent! execute "!ctags --c-kinds=+p --fields=+S *"
        " execute "!ctags -R --c++-kinds=-p --fields=+iaS --extra=+q ."
    endif
    if(executable('cscope')&&has("cscope"))
        silent! execute "!find . -name '.svn' -prune -o -name '.git' -prune -o -name '*.h' -o -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.java' -o -name '*.cs' > cscope.files"
    endif
    execute "!cscope -Rbq"
    execute "normal :"
    if filereadable("cscope.out")
        execute "cs add cscope.out"
    endif
    let g:LookupFile_TagExpr = '"./filenametags"'
endfunction

function! Clean()
    exec 'retab'
    exec '%s/\s\+$//e'
    exec 'silent! %s/$//g'
endfunction

function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endf

function! CloseBracket()
    if match(getline(line('.') + 1), '\s*}') < 0
        return "}"
    else
        return "\<Esc>j0f}a"
    endif
endf

function! QuoteDelim(char)
    let line = getline('.')
    let col = col('.')
    if line[col - 2] == "\\"
        " Inserting a quoted quotation mark into the string
        return a:char
    elseif line[col - 1] == a:char
        " Escaping out of the string
        return "\<Right>"
    else
        " Starting a string
        return a:char.a:char."\<Esc>i"
    endif
endf
